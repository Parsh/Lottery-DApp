{"version":3,"sources":["Lottery.test.js"],"names":["ganache","require","Web3","web3","provider","compiledContract","describe","beforeEach","accounts","eth","getAccounts","lottery","Contract","JSON","parse","interface","deploy","data","bytecode","send","from","gas","it","expect","options","address","toBeDefined","methods","enter","value","utils","toWei","players","getPlayers","call","toEqual","length","toBe","fail","err","lotter","pickWinner","currentBal","getBalance","lotteryBalance","parseInt","finalBal","diff"],"mappings":"AAAA,MAAMA,UAAUC,QAAQ,aAAR,CAAhB;AACA,MAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,MAAME,OAAO,IAAID,IAAJ,CAASF,QAAQI,QAAR,EAAT,CAAb;AACA,MAAMC,mBAAmBJ,QAAQ,YAAR,CAAzB;;AAEAK,SAAS,kBAAT,EAA6B,MAAM;AACjCC,aAAW,YAAY;AACrBC,eAAW,MAAML,KAAKM,GAAL,CAASC,WAAT,EAAjB;AACAC,cAAU,MAAM,IAAIR,KAAKM,GAAL,CAASG,QAAb,CACdC,KAAKC,KAAL,CAAWT,iBAAiBU,SAA5B,CADc,EAGbC,MAHa,CAGN;AACNC,YAAMZ,iBAAiBa;AADjB,KAHM,EAMbC,IANa,CAMR;AACJC,YAAMZ,SAAS,CAAT,CADF;AAEJa,WAAK;AAFD,KANQ,CAAhB;AAUD,GAZD;;AAcAC,KAAG,4BAAH,EAAiC,MAAM;AACrCC,WAAOZ,QAAQa,OAAR,CAAgBC,OAAvB,EAAgCC,WAAhC;AACD,GAFD;;AAIAJ,KAAG,8CAAH,EAAmD,YAAY;AAC7D,UAAMX,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,YAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,aAAO1B,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,KAAjB,EAAwB,OAAxB;AAF0B,KAA7B,CAAN;;AAKA,UAAMC,UAAU,MAAMrB,QAAQgB,OAAR,CAAgBM,UAAhB,GAA6BC,IAA7B,CAAkC;AACtDd,YAAMZ,SAAS,CAAT;AADgD,KAAlC,CAAtB;;AAIAe,WAAOS,QAAQ,CAAR,CAAP,EAAmBG,OAAnB,CAA2B3B,SAAS,CAAT,CAA3B;AACAe,WAAOS,QAAQI,MAAf,EAAuBC,IAAvB,CAA4B,CAA5B;AACD,GAZD;;AAcAf,KAAG,qDAAH,EAA0D,YAAY;AACpE,UAAMX,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,YAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,aAAO1B,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,KAAjB,EAAwB,OAAxB;AAF0B,KAA7B,CAAN;;AAKA,UAAMpB,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,YAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,aAAO1B,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,KAAjB,EAAwB,OAAxB;AAF0B,KAA7B,CAAN;;AAKA,UAAMpB,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,YAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,aAAO1B,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,KAAjB,EAAwB,OAAxB;AAF0B,KAA7B,CAAN;;AAKA,UAAMC,UAAU,MAAMrB,QAAQgB,OAAR,CAAgBM,UAAhB,GAA6BC,IAA7B,CAAkC;AACtDd,YAAMZ,SAAS,CAAT;AADgD,KAAlC,CAAtB;;AAIAe,WAAOS,QAAQ,CAAR,CAAP,EAAmBG,OAAnB,CAA2B3B,SAAS,CAAT,CAA3B;AACAe,WAAOS,QAAQ,CAAR,CAAP,EAAmBG,OAAnB,CAA2B3B,SAAS,CAAT,CAA3B;AACAe,WAAOS,QAAQ,CAAR,CAAP,EAAmBG,OAAnB,CAA2B3B,SAAS,CAAT,CAA3B;AACAe,WAAOS,QAAQI,MAAf,EAAuBC,IAAvB,CAA4B,CAA5B;AACD,GAxBD;;AA0BAf,KAAG,mDAAH,EAAwD,YAAY;AAClE,QAAI;AACF,YAAMX,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,cAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,eAAO;AAF0B,OAA7B,CAAN;;AAKAS,aANE,CAMM;AACT,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZhB,aAAOgB,GAAP,EAAYb,WAAZ;AACD;AACF,GAXD;;AAaAJ,KAAG,mDAAH,EAAwD,YAAY;AAClE,QAAI;AACF,YAAMkB,OAAOb,OAAP,CAAec,UAAf,GAA4BtB,IAA5B,CAAiC;AACrCC,cAAMZ,SAAS,CAAT;AAD+B,OAAjC,CAAN;AAGA8B;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZhB,aAAOgB,GAAP,EAAYb,WAAZ;AACD;AACF,GATD;;AAWAJ,KAAG,8EAAH,EAAmF,YAAY;AAC7F,UAAMX,QAAQgB,OAAR,CAAgBC,KAAhB,GAAwBT,IAAxB,CAA6B;AACjCC,YAAMZ,SAAS,CAAT,CAD2B;AAEjCqB,aAAO1B,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,OAAtB;AAF0B,KAA7B,CAAN;;AAKA,UAAMW,aAAa,MAAMvC,KAAKM,GAAL,CAASkC,UAAT,CAAoBnC,SAAS,CAAT,CAApB,CAAzB;;AAEAoC,qBAAiB,MAAMzC,KAAKM,GAAL,CAASkC,UAAT,CAAoBhC,QAAQa,OAAR,CAAgBC,OAApC,CAAvB;AACAF,WAAOsB,SAASD,cAAT,CAAP,EAAiCT,OAAjC,CACEU,SAAS1C,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,OAAtB,CAAT,CADF;;AAIA,UAAMpB,QAAQgB,OAAR,CAAgBc,UAAhB,GAA6BtB,IAA7B,CAAkC;AACtCC,YAAMZ,SAAS,CAAT;AADgC,KAAlC,CAAN;AAGA,UAAMsC,WAAW,MAAM3C,KAAKM,GAAL,CAASkC,UAAT,CAAoBnC,SAAS,CAAT,CAApB,CAAvB;AACA,UAAMuC,OAAOD,WAAWJ,UAAxB;;AAEAnB,WAAOwB,IAAP,EAAaZ,OAAb,CAAqBU,SAAS1C,KAAK2B,KAAL,CAAWC,KAAX,CAAiB,GAAjB,EAAsB,OAAtB,CAAT,CAArB;;AAEA,UAAMC,UAAU,MAAMrB,QAAQgB,OAAR,CAAgBM,UAAhB,GAA6BC,IAA7B,CAAkC;AACtDd,YAAMZ,SAAS,CAAT;AADgD,KAAlC,CAAtB;AAGAe,WAAOS,QAAQI,MAAf,EAAuBC,IAAvB,CAA4B,CAA5B;;AAEAO,qBAAiB,MAAMzC,KAAKM,GAAL,CAASkC,UAAT,CAAoBhC,QAAQa,OAAR,CAAgBC,OAApC,CAAvB;AACAF,WAAOsB,SAASD,cAAT,CAAP,EAAiCT,OAAjC,CAAyC,CAAzC;AACD,GA5BD;AA6BD,CAhHD","file":"Lottery.test.js","sourcesContent":["const ganache = require('ganache-cli');\nconst Web3 = require('web3');\nconst web3 = new Web3(ganache.provider());\nconst compiledContract = require('../compile');\n\ndescribe('Lottery Contract', () => {\n  beforeEach(async () => {\n    accounts = await web3.eth.getAccounts();\n    lottery = await new web3.eth.Contract(\n      JSON.parse(compiledContract.interface)\n    )\n      .deploy({\n        data: compiledContract.bytecode\n      })\n      .send({\n        from: accounts[0],\n        gas: '1000000'\n      });\n  });\n\n  it('should deploy the contract', () => {\n    expect(lottery.options.address).toBeDefined();\n  });\n\n  it('should allow an account to enter the lottery', async () => {\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei('0.1', 'ether')\n    });\n\n    const players = await lottery.methods.getPlayers().call({\n      from: accounts[0]\n    });\n\n    expect(players[0]).toEqual(accounts[0]);\n    expect(players.length).toBe(1);\n  });\n\n  it('should allow multiple accounts to enter the lottery', async () => {\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei('0.1', 'ether')\n    });\n\n    await lottery.methods.enter().send({\n      from: accounts[1],\n      value: web3.utils.toWei('0.1', 'ether')\n    });\n\n    await lottery.methods.enter().send({\n      from: accounts[2],\n      value: web3.utils.toWei('0.1', 'ether')\n    });\n\n    const players = await lottery.methods.getPlayers().call({\n      from: accounts[0]\n    });\n\n    expect(players[0]).toEqual(accounts[0]);\n    expect(players[1]).toEqual(accounts[1]);\n    expect(players[2]).toEqual(accounts[2]);\n    expect(players.length).toBe(3);\n  });\n\n  it('should require a minimum amount of ether to enter', async () => {\n    try {\n      await lottery.methods.enter().send({\n        from: accounts[0],\n        value: '200'\n      });\n\n      fail(); //executes and fails the test if the above await didn't throw an error\n    } catch (err) {\n      expect(err).toBeDefined();\n    }\n  });\n\n  it('should only allow the manager to call pickWinner ', async () => {\n    try {\n      await lotter.methods.pickWinner().send({\n        from: accounts[1]\n      });\n      fail();\n    } catch (err) {\n      expect(err).toBeDefined();\n    }\n  });\n\n  it('should send all the money to the (single) winner and reset the players array', async () => {\n    await lottery.methods.enter().send({\n      from: accounts[1],\n      value: web3.utils.toWei('2', 'ether')\n    });\n\n    const currentBal = await web3.eth.getBalance(accounts[1]);\n\n    lotteryBalance = await web3.eth.getBalance(lottery.options.address);\n    expect(parseInt(lotteryBalance)).toEqual(\n      parseInt(web3.utils.toWei('2', 'ether'))\n    );\n\n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n    const finalBal = await web3.eth.getBalance(accounts[1]);\n    const diff = finalBal - currentBal;\n\n    expect(diff).toEqual(parseInt(web3.utils.toWei('2', 'ether')));\n\n    const players = await lottery.methods.getPlayers().call({\n      from: accounts[0]\n    });\n    expect(players.length).toBe(0);\n\n    lotteryBalance = await web3.eth.getBalance(lottery.options.address);\n    expect(parseInt(lotteryBalance)).toEqual(0);\n  });\n});\n"]}